/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NestPriceFacadeInterface extends ethers.utils.Interface {
  functions: {
    "_governance()": FunctionFragment;
    "addPair(uint256,address)": FunctionFragment;
    "balanceOf(address,address)": FunctionFragment;
    "changeOpener(uint256,address)": FunctionFragment;
    "close(uint256,uint256[][])": FunctionFragment;
    "decrease(uint256,uint128)": FunctionFragment;
    "donate(uint256,uint256)": FunctionFragment;
    "estimate(uint256)": FunctionFragment;
    "findPrice(uint256,uint256[],uint256,address)": FunctionFragment;
    "findPriceOld(uint256,uint256,uint256)": FunctionFragment;
    "getAccountCount()": FunctionFragment;
    "getAccountIndex(address)": FunctionFragment;
    "getChannelInfo(uint256)": FunctionFragment;
    "getConfig()": FunctionFragment;
    "getMinedBlocks(uint256,uint256)": FunctionFragment;
    "increase(uint256,uint128)": FunctionFragment;
    "indexAddress(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "lastPriceList(uint256,uint256[],uint256,address)": FunctionFragment;
    "lastPriceListAndTriggeredPriceInfo(uint256,uint256,uint256)": FunctionFragment;
    "list(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "modify(uint256,tuple)": FunctionFragment;
    "open(address,uint96,address,address[],tuple)": FunctionFragment;
    "pay(uint256,address,uint256)": FunctionFragment;
    "post(uint256,uint256,uint256[])": FunctionFragment;
    "setConfig(tuple)": FunctionFragment;
    "take(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "totalETHRewards(uint256)": FunctionFragment;
    "triggeredPrice(uint256,uint256[],address)": FunctionFragment;
    "triggeredPriceInfo(uint256,uint256)": FunctionFragment;
    "update(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPair",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOpener",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [BigNumberish, BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "decrease",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findPrice",
    values: [BigNumberish, BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "findPriceOld",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannelInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMinedBlocks",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastPriceList",
    values: [BigNumberish, BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPriceListAndTriggeredPriceInfo",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "modify",
    values: [
      BigNumberish,
      {
        rewardPerBlock: BigNumberish;
        postFeeUnit: BigNumberish;
        singleFee: BigNumberish;
        reductionRate: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [
      string,
      BigNumberish,
      string,
      string[],
      {
        rewardPerBlock: BigNumberish;
        postFeeUnit: BigNumberish;
        singleFee: BigNumberish;
        reductionRate: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      {
        maxBiteNestedLevel: BigNumberish;
        priceEffectSpan: BigNumberish;
        pledgeNest: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "take",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalETHRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "triggeredPrice",
    values: [BigNumberish, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggeredPriceInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "update", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_governance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeOpener",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decrease", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "estimate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "findPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findPriceOld",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChannelInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinedBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "increase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "indexAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastPriceList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPriceListAndTriggeredPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalETHRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggeredPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggeredPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Open(uint256,address,uint256,address)": EventFragment;
    "Post(uint256,uint256,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Open"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Post"): EventFragment;
}

export class NestPriceFacade extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NestPriceFacadeInterface;

  functions: {
    _governance(overrides?: CallOverrides): Promise<[string]>;

    addPair(
      channelId: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      tokenAddress: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeOpener(
      channelId: BigNumberish,
      newOpener: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    close(
      channelId: BigNumberish,
      indices: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decrease(
      channelId: BigNumberish,
      vault: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    donate(
      channelId: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimate(
      channelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "findPrice(uint256,uint256[],uint256,address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      height: BigNumberish,
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "findPrice(uint256,uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    findPriceOld(
      channelId: BigNumberish,
      height: BigNumberish,
      pairIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    getAccountCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountIndex(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getChannelInfo(
      channelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          string,
          number,
          number,
          number,
          ([string, BigNumber] & { target: string; sheetCount: BigNumber })[]
        ] & {
          channelId: BigNumber;
          token0: string;
          unit: BigNumber;
          reward: string;
          rewardPerBlock: BigNumber;
          vault: BigNumber;
          rewards: BigNumber;
          postFeeUnit: number;
          count: number;
          opener: string;
          genesisBlock: number;
          singleFee: number;
          reductionRate: number;
          pairs: ([string, BigNumber] & {
            target: string;
            sheetCount: BigNumber;
          })[];
        }
      ]
    >;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, number] & {
          maxBiteNestedLevel: number;
          priceEffectSpan: number;
          pledgeNest: number;
        }
      ]
    >;

    getMinedBlocks(
      channelId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minedBlocks: BigNumber;
        totalShares: BigNumber;
      }
    >;

    increase(
      channelId: BigNumberish,
      vault: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    indexAddress(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lastPriceList(uint256,uint256[],uint256,address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      count: BigNumberish,
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lastPriceList(uint256,uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "lastPriceListAndTriggeredPriceInfo(uint256,uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, BigNumber, BigNumber, BigNumber] & {
        prices: BigNumber[];
        triggeredPriceBlockNumber: BigNumber;
        triggeredPriceValue: BigNumber;
        triggeredAvgPrice: BigNumber;
        triggeredSigmaSQ: BigNumber;
      }
    >;

    "lastPriceListAndTriggeredPriceInfo(uint256,uint256[],uint256,address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      count: BigNumberish,
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    list(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      offset: BigNumberish,
      count: BigNumberish,
      order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          number,
          string,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          BigNumber
        ] & {
          index: number;
          miner: string;
          height: number;
          remainNum: number;
          ethNumBal: number;
          tokenNumBal: number;
          nestNum1k: number;
          level: number;
          shares: number;
          price: BigNumber;
        })[]
      ]
    >;

    modify(
      channelId: BigNumberish,
      config: {
        rewardPerBlock: BigNumberish;
        postFeeUnit: BigNumberish;
        singleFee: BigNumberish;
        reductionRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    open(
      token0: string,
      unit: BigNumberish,
      reward: string,
      tokens: string[],
      config: {
        rewardPerBlock: BigNumberish;
        postFeeUnit: BigNumberish;
        singleFee: BigNumberish;
        reductionRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pay(
      channelId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    post(
      channelId: BigNumberish,
      scale: BigNumberish,
      equivalents: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      config: {
        maxBiteNestedLevel: BigNumberish;
        priceEffectSpan: BigNumberish;
        pledgeNest: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    take(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      index: BigNumberish,
      takeNum: BigNumberish,
      newEquivalent: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalETHRewards(
      channelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "triggeredPrice(uint256,uint256[],address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "triggeredPrice(uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    "triggeredPriceInfo(uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        avgPrice: BigNumber;
        sigmaSQ: BigNumber;
      }
    >;

    "triggeredPriceInfo(uint256,uint256[],address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _governance(overrides?: CallOverrides): Promise<string>;

  addPair(
    channelId: BigNumberish,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    tokenAddress: string,
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeOpener(
    channelId: BigNumberish,
    newOpener: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  close(
    channelId: BigNumberish,
    indices: BigNumberish[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decrease(
    channelId: BigNumberish,
    vault: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  donate(
    channelId: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimate(
    channelId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "findPrice(uint256,uint256[],uint256,address)"(
    channelId: BigNumberish,
    pairIndices: BigNumberish[],
    height: BigNumberish,
    payback: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "findPrice(uint256,uint256,uint256)"(
    channelId: BigNumberish,
    pairIndex: BigNumberish,
    height: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
  >;

  findPriceOld(
    channelId: BigNumberish,
    height: BigNumberish,
    pairIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
  >;

  getAccountCount(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountIndex(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  getChannelInfo(
    channelId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      string,
      number,
      number,
      number,
      ([string, BigNumber] & { target: string; sheetCount: BigNumber })[]
    ] & {
      channelId: BigNumber;
      token0: string;
      unit: BigNumber;
      reward: string;
      rewardPerBlock: BigNumber;
      vault: BigNumber;
      rewards: BigNumber;
      postFeeUnit: number;
      count: number;
      opener: string;
      genesisBlock: number;
      singleFee: number;
      reductionRate: number;
      pairs: ([string, BigNumber] & {
        target: string;
        sheetCount: BigNumber;
      })[];
    }
  >;

  getConfig(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      maxBiteNestedLevel: number;
      priceEffectSpan: number;
      pledgeNest: number;
    }
  >;

  getMinedBlocks(
    channelId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { minedBlocks: BigNumber; totalShares: BigNumber }
  >;

  increase(
    channelId: BigNumberish,
    vault: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  indexAddress(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  initialize(
    governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lastPriceList(uint256,uint256[],uint256,address)"(
    channelId: BigNumberish,
    pairIndices: BigNumberish[],
    count: BigNumberish,
    payback: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lastPriceList(uint256,uint256,uint256)"(
    channelId: BigNumberish,
    pairIndex: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "lastPriceListAndTriggeredPriceInfo(uint256,uint256,uint256)"(
    channelId: BigNumberish,
    pairIndex: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber, BigNumber, BigNumber, BigNumber] & {
      prices: BigNumber[];
      triggeredPriceBlockNumber: BigNumber;
      triggeredPriceValue: BigNumber;
      triggeredAvgPrice: BigNumber;
      triggeredSigmaSQ: BigNumber;
    }
  >;

  "lastPriceListAndTriggeredPriceInfo(uint256,uint256[],uint256,address)"(
    channelId: BigNumberish,
    pairIndices: BigNumberish[],
    count: BigNumberish,
    payback: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  list(
    channelId: BigNumberish,
    pairIndex: BigNumberish,
    offset: BigNumberish,
    count: BigNumberish,
    order: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      number,
      string,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      BigNumber
    ] & {
      index: number;
      miner: string;
      height: number;
      remainNum: number;
      ethNumBal: number;
      tokenNumBal: number;
      nestNum1k: number;
      level: number;
      shares: number;
      price: BigNumber;
    })[]
  >;

  modify(
    channelId: BigNumberish,
    config: {
      rewardPerBlock: BigNumberish;
      postFeeUnit: BigNumberish;
      singleFee: BigNumberish;
      reductionRate: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  open(
    token0: string,
    unit: BigNumberish,
    reward: string,
    tokens: string[],
    config: {
      rewardPerBlock: BigNumberish;
      postFeeUnit: BigNumberish;
      singleFee: BigNumberish;
      reductionRate: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pay(
    channelId: BigNumberish,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  post(
    channelId: BigNumberish,
    scale: BigNumberish,
    equivalents: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    config: {
      maxBiteNestedLevel: BigNumberish;
      priceEffectSpan: BigNumberish;
      pledgeNest: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  take(
    channelId: BigNumberish,
    pairIndex: BigNumberish,
    index: BigNumberish,
    takeNum: BigNumberish,
    newEquivalent: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalETHRewards(
    channelId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "triggeredPrice(uint256,uint256[],address)"(
    channelId: BigNumberish,
    pairIndices: BigNumberish[],
    payback: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "triggeredPrice(uint256,uint256)"(
    channelId: BigNumberish,
    pairIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
  >;

  "triggeredPriceInfo(uint256,uint256)"(
    channelId: BigNumberish,
    pairIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      blockNumber: BigNumber;
      price: BigNumber;
      avgPrice: BigNumber;
      sigmaSQ: BigNumber;
    }
  >;

  "triggeredPriceInfo(uint256,uint256[],address)"(
    channelId: BigNumberish,
    pairIndices: BigNumberish[],
    payback: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update(
    newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    tokenAddress: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _governance(overrides?: CallOverrides): Promise<string>;

    addPair(
      channelId: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      tokenAddress: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeOpener(
      channelId: BigNumberish,
      newOpener: string,
      overrides?: CallOverrides
    ): Promise<void>;

    close(
      channelId: BigNumberish,
      indices: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<void>;

    decrease(
      channelId: BigNumberish,
      vault: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    donate(
      channelId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    estimate(
      channelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "findPrice(uint256,uint256[],uint256,address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      height: BigNumberish,
      payback: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "findPrice(uint256,uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    findPriceOld(
      channelId: BigNumberish,
      height: BigNumberish,
      pairIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    getAccountCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountIndex(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChannelInfo(
      channelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        string,
        number,
        number,
        number,
        ([string, BigNumber] & { target: string; sheetCount: BigNumber })[]
      ] & {
        channelId: BigNumber;
        token0: string;
        unit: BigNumber;
        reward: string;
        rewardPerBlock: BigNumber;
        vault: BigNumber;
        rewards: BigNumber;
        postFeeUnit: number;
        count: number;
        opener: string;
        genesisBlock: number;
        singleFee: number;
        reductionRate: number;
        pairs: ([string, BigNumber] & {
          target: string;
          sheetCount: BigNumber;
        })[];
      }
    >;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        maxBiteNestedLevel: number;
        priceEffectSpan: number;
        pledgeNest: number;
      }
    >;

    getMinedBlocks(
      channelId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minedBlocks: BigNumber;
        totalShares: BigNumber;
      }
    >;

    increase(
      channelId: BigNumberish,
      vault: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    indexAddress(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(governance: string, overrides?: CallOverrides): Promise<void>;

    "lastPriceList(uint256,uint256[],uint256,address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      count: BigNumberish,
      payback: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "lastPriceList(uint256,uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "lastPriceListAndTriggeredPriceInfo(uint256,uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, BigNumber, BigNumber, BigNumber] & {
        prices: BigNumber[];
        triggeredPriceBlockNumber: BigNumber;
        triggeredPriceValue: BigNumber;
        triggeredAvgPrice: BigNumber;
        triggeredSigmaSQ: BigNumber;
      }
    >;

    "lastPriceListAndTriggeredPriceInfo(uint256,uint256[],uint256,address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      count: BigNumberish,
      payback: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    list(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      offset: BigNumberish,
      count: BigNumberish,
      order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        number,
        string,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        BigNumber
      ] & {
        index: number;
        miner: string;
        height: number;
        remainNum: number;
        ethNumBal: number;
        tokenNumBal: number;
        nestNum1k: number;
        level: number;
        shares: number;
        price: BigNumber;
      })[]
    >;

    modify(
      channelId: BigNumberish,
      config: {
        rewardPerBlock: BigNumberish;
        postFeeUnit: BigNumberish;
        singleFee: BigNumberish;
        reductionRate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    open(
      token0: string,
      unit: BigNumberish,
      reward: string,
      tokens: string[],
      config: {
        rewardPerBlock: BigNumberish;
        postFeeUnit: BigNumberish;
        singleFee: BigNumberish;
        reductionRate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    pay(
      channelId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    post(
      channelId: BigNumberish,
      scale: BigNumberish,
      equivalents: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      config: {
        maxBiteNestedLevel: BigNumberish;
        priceEffectSpan: BigNumberish;
        pledgeNest: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    take(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      index: BigNumberish,
      takeNum: BigNumberish,
      newEquivalent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalETHRewards(
      channelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "triggeredPrice(uint256,uint256[],address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      payback: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "triggeredPrice(uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    "triggeredPriceInfo(uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        avgPrice: BigNumber;
        sigmaSQ: BigNumber;
      }
    >;

    "triggeredPriceInfo(uint256,uint256[],address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      payback: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    update(newGovernance: string, overrides?: CallOverrides): Promise<void>;

    withdraw(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Open(
      channelId?: null,
      token0?: null,
      unit?: null,
      reward?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string],
      { channelId: BigNumber; token0: string; unit: BigNumber; reward: string }
    >;

    Post(
      channelId?: null,
      pairIndex?: null,
      miner?: null,
      index?: null,
      scale?: null,
      price?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        channelId: BigNumber;
        pairIndex: BigNumber;
        miner: string;
        index: BigNumber;
        scale: BigNumber;
        price: BigNumber;
      }
    >;
  };

  estimateGas: {
    _governance(overrides?: CallOverrides): Promise<BigNumber>;

    addPair(
      channelId: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      tokenAddress: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeOpener(
      channelId: BigNumberish,
      newOpener: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    close(
      channelId: BigNumberish,
      indices: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decrease(
      channelId: BigNumberish,
      vault: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    donate(
      channelId: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimate(
      channelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "findPrice(uint256,uint256[],uint256,address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      height: BigNumberish,
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "findPrice(uint256,uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findPriceOld(
      channelId: BigNumberish,
      height: BigNumberish,
      pairIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountIndex(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChannelInfo(
      channelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMinedBlocks(
      channelId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increase(
      channelId: BigNumberish,
      vault: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    indexAddress(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lastPriceList(uint256,uint256[],uint256,address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      count: BigNumberish,
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lastPriceList(uint256,uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPriceListAndTriggeredPriceInfo(uint256,uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPriceListAndTriggeredPriceInfo(uint256,uint256[],uint256,address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      count: BigNumberish,
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    list(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      offset: BigNumberish,
      count: BigNumberish,
      order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modify(
      channelId: BigNumberish,
      config: {
        rewardPerBlock: BigNumberish;
        postFeeUnit: BigNumberish;
        singleFee: BigNumberish;
        reductionRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    open(
      token0: string,
      unit: BigNumberish,
      reward: string,
      tokens: string[],
      config: {
        rewardPerBlock: BigNumberish;
        postFeeUnit: BigNumberish;
        singleFee: BigNumberish;
        reductionRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pay(
      channelId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    post(
      channelId: BigNumberish,
      scale: BigNumberish,
      equivalents: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConfig(
      config: {
        maxBiteNestedLevel: BigNumberish;
        priceEffectSpan: BigNumberish;
        pledgeNest: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    take(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      index: BigNumberish,
      takeNum: BigNumberish,
      newEquivalent: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalETHRewards(
      channelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "triggeredPrice(uint256,uint256[],address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "triggeredPrice(uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "triggeredPriceInfo(uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "triggeredPriceInfo(uint256,uint256[],address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPair(
      channelId: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      tokenAddress: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeOpener(
      channelId: BigNumberish,
      newOpener: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    close(
      channelId: BigNumberish,
      indices: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decrease(
      channelId: BigNumberish,
      vault: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    donate(
      channelId: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimate(
      channelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "findPrice(uint256,uint256[],uint256,address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      height: BigNumberish,
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "findPrice(uint256,uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findPriceOld(
      channelId: BigNumberish,
      height: BigNumberish,
      pairIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountIndex(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChannelInfo(
      channelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinedBlocks(
      channelId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increase(
      channelId: BigNumberish,
      vault: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    indexAddress(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lastPriceList(uint256,uint256[],uint256,address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      count: BigNumberish,
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lastPriceList(uint256,uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastPriceListAndTriggeredPriceInfo(uint256,uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastPriceListAndTriggeredPriceInfo(uint256,uint256[],uint256,address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      count: BigNumberish,
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    list(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      offset: BigNumberish,
      count: BigNumberish,
      order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modify(
      channelId: BigNumberish,
      config: {
        rewardPerBlock: BigNumberish;
        postFeeUnit: BigNumberish;
        singleFee: BigNumberish;
        reductionRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    open(
      token0: string,
      unit: BigNumberish,
      reward: string,
      tokens: string[],
      config: {
        rewardPerBlock: BigNumberish;
        postFeeUnit: BigNumberish;
        singleFee: BigNumberish;
        reductionRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pay(
      channelId: BigNumberish,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    post(
      channelId: BigNumberish,
      scale: BigNumberish,
      equivalents: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      config: {
        maxBiteNestedLevel: BigNumberish;
        priceEffectSpan: BigNumberish;
        pledgeNest: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    take(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      index: BigNumberish,
      takeNum: BigNumberish,
      newEquivalent: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalETHRewards(
      channelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "triggeredPrice(uint256,uint256[],address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "triggeredPrice(uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "triggeredPriceInfo(uint256,uint256)"(
      channelId: BigNumberish,
      pairIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "triggeredPriceInfo(uint256,uint256[],address)"(
      channelId: BigNumberish,
      pairIndices: BigNumberish[],
      payback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
